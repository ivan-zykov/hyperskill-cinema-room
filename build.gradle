import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

def myCustomJavaVer = 23

buildscript {
    def myCustomKotlinVer = "2.2.0"

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$myCustomKotlinVer"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:3.5.4"
        classpath "io.spring.gradle:dependency-management-plugin:1.1.7"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$myCustomKotlinVer"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$myCustomKotlinVer"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "kotlin-spring"
apply plugin: "kotlin-jpa"

repositories {
    mavenCentral()
}

sourceSets.main.resources.srcDirs = ["src/resources"]

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation(platform("org.junit:junit-bom:5.12.2"))     // Syncs JUnit 5 versions
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'junit:junit:4.13.2'                        // JUnit 4 API (for Hyperskill's integration tests)
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    // Run JUnit 4 on JUnit Platform. Version comes from the BOM
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // Helpful for Gradle/IDE runs. Version comes from the BOM
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xannotation-default-target=param-property']
        jvmTarget = "$myCustomJavaVer"
    }
}

test {
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    useJUnitPlatform()
}

tasks.register('listGradlePlugins') {
    project.plugins.each {
        println it
    }
}
